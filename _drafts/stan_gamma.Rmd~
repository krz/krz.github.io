---
title: "Fitting a Gamma GLM in STAN"
author: "Christoph Kurz"
date: "February 11, 2016"
output: html_document
---

I've been playing around with the [Stan](http://mc-stan.org) probabilistic programming language for full Bayesian statistical inference lately. Stan has nice R interface in the `rstan` package.
This will be the start of a small serious where we fit some simple models using Stan.

We start with a Gamma GLM.

First we generate some data:

```{r}
set.seed(41)
N <- 500
dat <- data.frame(x1=runif(N,-1,1),x2=runif(N,-1,1))
X <- model.matrix(~x1*x2,dat) # the model matrix
K <- dim(X)[2] #number of regression params
betas <- runif(K,-1,1) #regression parameters
mus <- exp(X%*%betas)
shape <- 10
y <- rgamma(N, rate = shape / mus, shape = shape)
```

We now have a model matrix $X$, shape = 10, outcome $y$ and a beta vector `r betas` and try to estimate the
true parameters.

Here is the Stan model, defined as a string

```{r, echo=T}
stan_code <- "
data {
  int<lower=0> N;
  int<lower=0> K;
  matrix[N,K] X; // predictor matrix
  vector[N] y;
}
parameters {
  vector[K] betas;
  real<lower=0.001,upper=100> shape;
}
model {
  for(k in 1:K)
    betas[k] ~ normal(0,100);
  shape ~ cauchy(0,2.5);
  for(i in 1:N)
    y[i] ~ gamma(shape, (shape / exp(X[i,] * betas)));
}
"
```

Execute the stan function from `rstan` using four chains on four cores

```{r, echo=T, message=F, warning=FALSE, cache=TRUE}
library(rstan)
m <- stan(model_code = stan_code, data = list(X=X, K=K, y = y, N = N),
               chains = 4, cores =4)
print(m, digits=4)
```

If you compare the estimated shape and betas, you see that are almost spot on.

Let's see a trace plot of the MCMC chains:

```{r, echo=T, message=F, warning=FALSE, cache=TRUE}
traceplot(m)
```
